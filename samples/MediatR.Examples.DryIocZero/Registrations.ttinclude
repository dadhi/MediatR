<#
// TODO:
// 1. Fill-in `GetContainerWithRegistrations` method below with creation of DryIoc `Container` and registrations.
// 2. Specify the resolution roots via `SpecifyResolutionRoots`, see example below.
// 3. Re-save the "Container.Generated.tt" file. Confirm the Visual Studio prompt if any.
// 4. Check the "Container.Generated.cs" for the generated results and issues.
//
// Note: 
// - When specifying assembly path, you may use $(SolutionDir), $(ProjectDir), $(Configuration) parameters.
#>
<#@ assembly Name="$(DryIocAssembly)" #>
<#@ import Namespace="DryIoc" #>
<#@ import Namespace="ImTools" #>
<#
// TODO: Insert assemblies and namespaces with your services to register in container 
#>
<#@ assembly Name="$(SolutionDir)src\MediatR\bin\$(Configuration)\netstandard1.3\MediatR.dll" #>
<#@ import namespace="MediatR" #>
<#@ import namespace="MediatR.Pipeline" #>
<#@ assembly Name="$(SolutionDir)samples\MediatR.Examples\bin\$(Configuration)\net45\MediatR.Examples.dll" #>
<#@ import namespace="MediatR.Examples" #>
<#+
// TODO: Specify the container and registrations ...
IContainer GetContainerWithRegistrations()
{
    var container = new Container();

    container.RegisterPlaceholder<System.IO.TextWriter>();
    container.RegisterPlaceholder<SingleInstanceFactory>();

    container.RegisterMany(
        new[] { typeof(IMediator).GetAssembly(), typeof(Ping).GetAssembly() },
        Registrator.Interfaces);

    container.Register(typeof(RequestProcessor<,>));
    container.Register(typeof(NotificationProcessor<>));

    return container;
}

// TODO: Filter the root services to generate expressions for ...
ServiceInfo[] SpecifyResolutionRoots(ServiceRegistrationInfo reg)
{
    var type = reg.ServiceType;

    return
        // Close known open-generics
        type == typeof(RequestProcessor<,>) ? new []{
            reg.ToServiceInfo<RequestProcessor<Ping, Pong>>(),
            reg.ToServiceInfo<RequestProcessor<Jing, Unit>>()
        } :

        type == typeof(NotificationProcessor<>) ? new []{
            reg.ToServiceInfo<NotificationProcessor<Pinged>>(),
            reg.ToServiceInfo<NotificationProcessor<Ponged>>()
        } :

        // MediatR abstractions
        type.IsInterface() && type.Namespace?.StartsWith(nameof(MediatR)) == true ? new []{
            reg.ToServiceInfo() } :
        null;
}

// TODO: Additional roots to generate ...
ServiceInfo[] CustomResolutionRoots = {};
#>